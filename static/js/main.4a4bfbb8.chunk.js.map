{"version":3,"sources":["Archives.tsx","ChatDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Archives","props","state","archives","a","fetch","headers","resp","ok","json","this","setState","rows","availables","map","available","index","Row","to","ref","name","Container","Component","ChatDisplay","data","match","params","entry","content","img","src","alt","stamp","date","Date","toString","user","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sVAoBaA,EAAb,kDACE,WAAYC,GAAY,IAAD,8BACrB,cAAMA,IACDC,MAAQ,CAAEC,SAAU,MAFJ,EADzB,4FAME,8BAAAC,EAAA,sEACqBC,MACjB,sEACA,CACEC,QAAS,CACP,gBAAiB,cALzB,YACQC,EADR,QASWC,GATX,gCAUuBD,EAAKE,OAV5B,OAUUA,EAVV,OAWIC,KAAKC,SAAS,CAAER,SAAUM,IAX9B,gDANF,0EAqBE,WAAU,IAAD,EACDG,EAAI,UAAGF,KAAKR,MAAMC,gBAAd,aAAG,EAAqBU,WAAWC,KAAI,SAACC,EAAWC,GAC3D,OACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,CAAMC,GAAIH,EAAUI,IAApB,SAA0BJ,EAAUK,QAD5BJ,MAMd,OAAO,cAACK,EAAA,EAAD,UAAYT,QA9BvB,GAA8BU,aCWjBC,EAAb,kDAIE,WAAYtB,GAAgD,IAAD,8BACzD,cAAMA,IAEDC,MAAQ,CAAEsB,KAAM,MAHoC,EAJ7D,4FAUE,gCAAApB,EAAA,6DAGgBe,EAEVT,KAAKT,MAHPwB,MACEC,OAAUP,IAHhB,SAOqBd,MACjB,yDAA2Dc,EAAM,QACjE,CACEb,QAAS,CACP,gBAAiB,cAXzB,YAOQC,EAPR,QAeWC,GAfX,gCAgBuBD,EAAKE,OAhB5B,OAgBUA,EAhBV,OAiBIC,KAAKC,SAAS,CAAEa,KAAMf,IAjB1B,gDAVF,0EA+BE,WAAU,IAAD,EACDG,EAAI,UAAGF,KAAKR,MAAMsB,YAAd,aAAG,EAAiBV,KAAI,SAACa,GACjC,IAAIC,EAAU,KACVD,EAAME,IACRD,EAAU,qBAAKE,IAAKH,EAAME,IAAKE,IAAI,KAC1BJ,EAAMK,MACfJ,EAAO,iBAAaD,EAAMK,OACjBL,EAAMC,UACfA,EAAUD,EAAMC,SAGlB,IAAMK,EAAO,IAAIC,KAAKP,EAAMM,MAE5B,OACE,eAAChB,EAAA,EAAD,WACGgB,EAAKE,WADR,MACuBR,EAAMS,KAAKhB,KADlC,MAC2CQ,QAK/C,OAAO,cAACP,EAAA,EAAD,UAAYT,QAnDvB,GAAiCU,aCXlBe,MAbf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,QAAQC,UAAWjB,UCAxBkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4a4bfbb8.chunk.js","sourcesContent":["import { Component } from \"react\";\n\nimport { Container, Row } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Archives.css\";\n\ninterface ArchiveEntry {\n  ref: string;\n  name: string;\n}\n\ninterface ChatArchives {\n  availables: Array<ArchiveEntry>;\n}\n\ntype ArchiveState = {\n  archives: ChatArchives | null;\n};\n\nexport class Archives extends Component<{}, ArchiveState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = { archives: null };\n  }\n\n  async componentDidMount() {\n    const resp = await fetch(\n      \"https://hololive-spammers.github.io/FubukiHunter-Chat/archives.json\",\n      {\n        headers: {\n          \"Cache-Control\": \"no-cache\",\n        },\n      }\n    );\n    if (resp.ok) {\n      const json = await resp.json();\n      this.setState({ archives: json });\n    }\n  }\n\n  render() {\n    const rows = this.state.archives?.availables.map((available, index) => {\n      return (\n        <Row key={index}>\n          <Link to={available.ref}>{available.name}</Link>\n        </Row>\n      );\n    });\n\n    return <Container>{rows}</Container>;\n  }\n}\n","import { Component } from \"react\";\n\nimport { Container, Row } from \"react-bootstrap\";\n\nimport { RouteComponentProps } from \"react-router\";\n\nimport \"./Archives.css\";\n\ninterface User {\n  id: string;\n  name: string;\n}\n\ninterface ChatEntry {\n  user: User;\n  date: string;\n  stamp: string | undefined;\n  img: string | undefined;\n  content: string | undefined;\n}\n\ntype ChatData = Array<ChatEntry>;\n\ntype ChatDisplayParams = {\n  ref: string;\n};\n\ntype ChatDisplayState = {\n  data: ChatData | null;\n};\n\nexport class ChatDisplay extends Component<\n  RouteComponentProps<ChatDisplayParams>,\n  ChatDisplayState\n> {\n  constructor(props: RouteComponentProps<ChatDisplayParams>) {\n    super(props);\n\n    this.state = { data: null };\n  }\n\n  async componentDidMount() {\n    const {\n      match: {\n        params: { ref },\n      },\n    } = this.props;\n\n    const resp = await fetch(\n      \"https://hololive-spammers.github.io/FubukiHunter-Chat/\" + ref + \".json\",\n      {\n        headers: {\n          \"Cache-Control\": \"no-cache\",\n        },\n      }\n    );\n    if (resp.ok) {\n      const json = await resp.json();\n      this.setState({ data: json });\n    }\n  }\n\n  render() {\n    const rows = this.state.data?.map((entry) => {\n      let content = null;\n      if (entry.img) {\n        content = <img src={entry.img} alt=\"\" />;\n      } else if (entry.stamp) {\n        content = `stamp: ${entry.stamp}`;\n      } else if (entry.content) {\n        content = entry.content;\n      }\n\n      const date = new Date(entry.date);\n\n      return (\n        <Row>\n          {date.toString()} - {entry.user.name} - {content}\n        </Row>\n      );\n    });\n\n    return <Container>{rows}</Container>;\n  }\n}\n","import { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport { Archives } from \"./Archives\";\nimport { ChatDisplay } from \"./ChatDisplay\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Archives />\n        </Route>\n        <Route path=\"/:ref\" component={ChatDisplay} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}