{"version":3,"sources":["Archives.tsx","ChatDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Archives","props","state","availables","a","fetch","headers","resp","ok","json","length","first","Date","date","last","setHours","dates","d","valueOf","setDate","getDate","push","this","setState","rows","map","available","index","getFullYear","toString","getMonth","Row","to","Container","Component","ChatDisplay","data","ref","match","params","rangeDate","moment","toDate","maxRangeDate","filter","entry","content","img","src","alt","stamp","user","name","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1438093f.chunk.js","sourcesContent":["import { Component } from \"react\";\n\nimport { Container, Row } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Archives.css\";\n\ntype ArchiveState = {\n  availables: Array<Date> | null;\n};\n\nexport class Archives extends Component<{}, ArchiveState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = { availables: null };\n  }\n\n  async componentDidMount() {\n    const resp = await fetch(\n      \"https://hololive-spammers.github.io/FubukiHunter-Chat/data.json\",\n      {\n        headers: {\n          \"Cache-Control\": \"no-cache\",\n        },\n      }\n    );\n    if (resp.ok) {\n      const json = await resp.json();\n      if (json.length !== 0) {\n        let first = new Date(json[0].date);\n        const last = new Date(json[json.length-1].date);\n        \n        first.setHours(0, 0, 0, 0);\n        let dates = []\n        for (let d = new Date(first.valueOf()); d <= last; d.setDate(d.getDate() + 1)) {\n          dates.push(d);\n        }\n        this.setState({ availables: dates });\n      }\n    }\n  }\n\n  render() {\n    const rows = this.state.availables?.map((available, index) => {\n      const date = available.getFullYear().toString() + available.getMonth().toString() + available.getDate().toString();\n      return (\n        <Row key={index}>\n          <Link to={date}>{date}</Link>\n        </Row>\n      );\n    });\n\n    return <Container>{rows}</Container>;\n  }\n}\n","import { Component } from \"react\";\r\n\r\nimport { Container, Row } from \"react-bootstrap\";\r\nimport { RouteComponentProps } from \"react-router\";\r\n\r\nimport moment from \"moment\";\r\n\r\nimport \"./Archives.css\";\r\n\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\ninterface ChatEntry {\r\n  user: User;\r\n  date: string;\r\n  stamp: string | undefined;\r\n  img: string | undefined;\r\n  content: string | undefined;\r\n}\r\n\r\ntype ChatData = Array<ChatEntry>;\r\n\r\ntype ChatDisplayParams = {\r\n  ref: string;\r\n};\r\n\r\ntype ChatDisplayState = {\r\n  data: ChatData | null;\r\n};\r\n\r\nexport class ChatDisplay extends Component<RouteComponentProps<ChatDisplayParams>, ChatDisplayState> {\r\n  constructor(props: RouteComponentProps<ChatDisplayParams>) {\r\n    super(props);\r\n\r\n    this.state = { data: null };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const resp = await fetch(\r\n      \"https://hololive-spammers.github.io/FubukiHunter-Chat/data.json\",\r\n      {\r\n        headers: {\r\n          \"Cache-Control\": \"no-cache\"\r\n        },\r\n      }\r\n    );\r\n    if (resp.ok) {\r\n      const json = await resp.json();\r\n      this.setState({ data: json });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { match: { params: { ref } } } = this.props;\r\n\r\n    const rangeDate = moment(ref, \"YYYYMMDD\").toDate();\r\n    let maxRangeDate = new Date(rangeDate.valueOf());\r\n    maxRangeDate.setDate(rangeDate.getDate() + 1);\r\n    \r\n    const rows = this.state.data?.filter((entry) => {\r\n      const date = new Date(entry.date);\r\n      if (date > maxRangeDate || date < rangeDate) {\r\n        return false;\r\n      }\r\n      return true;\r\n    }).map((entry) => {\r\n      let content = null;\r\n      if (entry.img) {\r\n        content = <img src={entry.img} alt=\"\" />;\r\n      }\r\n      else if (entry.stamp) {\r\n        content = `stamp: ${entry.stamp}`;\r\n      }\r\n      else if (entry.content) {\r\n        content = entry.content;\r\n      }\r\n\r\n      const date = new Date(entry.date);\r\n\r\n      return (\r\n        <Row>\r\n          {date.toString()} - {entry.user.name} - {content}\r\n        </Row>\r\n      )\r\n    });\r\n\r\n    return (\r\n        <Container>\r\n          {rows}\r\n        </Container>\r\n    );\r\n  }\r\n}\r\n","import { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport { Archives } from \"./Archives\";\nimport { ChatDisplay } from \"./ChatDisplay\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Archives />\n        </Route>\n        <Route path=\"/:ref\" component={ChatDisplay} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}