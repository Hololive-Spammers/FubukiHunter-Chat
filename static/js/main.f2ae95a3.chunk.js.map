{"version":3,"sources":["Archives.tsx","ChatDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Archives","props","state","availables","a","fetch","headers","resp","ok","json","length","first","Date","date","last","setHours","dates","d","valueOf","setDate","getDate","console","log","push","this","setState","rows","map","available","index","moment","format","Row","to","Container","Component","ChatDisplay","data","ref","match","params","rangeDate","toDate","maxRangeDate","filter","entry","content","img","src","alt","stamp","toString","user","name","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uWAaaA,EAAb,kDACE,WAAYC,GAAY,IAAD,8BACrB,cAAMA,IACDC,MAAQ,CAAEC,WAAY,MAFN,EADzB,4FAME,sCAAAC,EAAA,sEACqBC,MACjB,kEACA,CACEC,QAAS,CACP,gBAAiB,cALzB,YACQC,EADR,QASWC,GATX,gCAUuBD,EAAKE,OAV5B,OAWI,GAAoB,KADdA,EAVV,QAWaC,OAAc,CAMrB,IALIC,EAAQ,IAAIC,KAAKH,EAAK,GAAGI,MACvBC,EAAO,IAAIF,KAAKH,EAAKA,EAAKC,OAAS,GAAGG,MAE5CF,EAAMI,SAAS,EAAG,EAAG,EAAG,GACpBC,EAAQ,GAENC,EAAI,IAAIL,KAAKD,EAAMO,WACvBD,GAAKH,EACLG,EAAEE,QAAQF,EAAEG,UAAY,GAExBC,QAAQC,IAAIL,GACZD,EAAMO,KAAKN,GAEbO,KAAKC,SAAS,CAAEtB,WAAYa,IAzBlC,gDANF,0EAoCE,WAAU,IAAD,EACDU,EAAI,UAAGF,KAAKtB,MAAMC,kBAAd,aAAG,EAAuBwB,KAAI,SAACC,EAAWC,GAClD,IAAMhB,EAAOiB,IAAOF,GAAWG,OAAO,YACtC,OACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,CAAMC,GAAIpB,EAAV,SAAiBA,KADTgB,MAMd,OAAO,cAACK,EAAA,EAAD,UAAYR,QA9CvB,GAA8BS,aCmBjBC,EAAb,kDAIE,WAAYnC,GAAgD,IAAD,8BACzD,cAAMA,IAEDC,MAAQ,CAAEmC,KAAM,MAHoC,EAJ7D,4FAUE,8BAAAjC,EAAA,sEACqBC,MACjB,kEACA,CACEC,QAAS,CACP,gBAAiB,cALzB,YACQC,EADR,QASWC,GATX,gCAUuBD,EAAKE,OAV5B,OAUUA,EAVV,OAWIe,KAAKC,SAAS,CAAEY,KAAM5B,IAX1B,gDAVF,0EAyBE,WAAU,IAAD,EAGO6B,EAEVd,KAAKvB,MAHPsC,MACEC,OAAUF,IAIRG,EAAYX,IAAOQ,EAAK,YAAYI,SACtCC,EAAe,IAAI/B,KAAK6B,EAAUvB,WACtCyB,EAAaxB,QAAQsB,EAAUrB,UAAY,GAE3C,IAAMM,EAAI,UAAGF,KAAKtB,MAAMmC,YAAd,aAAG,EACTO,QAAO,SAACC,GACR,IAAMhC,EAAO,IAAID,KAAKiC,EAAMhC,MAC5B,QAAIA,EAAO8B,GAAgB9B,EAAO4B,MAKnCd,KAAI,SAACkB,GACJ,IAAIC,EAAU,KACVD,EAAME,IACRD,EAAU,qBAAKE,IAAKH,EAAME,IAAKE,IAAI,KAC1BJ,EAAMK,MACfJ,EAAO,iBAAaD,EAAMK,OACjBL,EAAMC,UACfA,EAAUD,EAAMC,SAGlB,IAAMjC,EAAO,IAAID,KAAKiC,EAAMhC,MAE5B,OACE,eAACmB,EAAA,EAAD,WACGnB,EAAKsC,WADR,MACuBN,EAAMO,KAAKC,KADlC,MAC2CP,QAKjD,OAAO,cAACZ,EAAA,EAAD,UAAYR,QA/DvB,GAAiCS,aCZlBmB,MAbf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,QAAQC,UAAWrB,UCAxBsB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f2ae95a3.chunk.js","sourcesContent":["import { Component } from \"react\";\n\nimport { Container, Row } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport moment from \"moment\";\n\nimport \"./Archives.css\";\n\ntype ArchiveState = {\n  availables: Array<Date> | null;\n};\n\nexport class Archives extends Component<{}, ArchiveState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = { availables: null };\n  }\n\n  async componentDidMount() {\n    const resp = await fetch(\n      \"https://hololive-spammers.github.io/FubukiHunter-Chat/data.json\",\n      {\n        headers: {\n          \"Cache-Control\": \"no-cache\",\n        },\n      }\n    );\n    if (resp.ok) {\n      const json = await resp.json();\n      if (json.length !== 0) {\n        let first = new Date(json[0].date);\n        const last = new Date(json[json.length - 1].date);\n\n        first.setHours(0, 0, 0, 0);\n        let dates = [];\n        for (\n          let d = new Date(first.valueOf());\n          d <= last;\n          d.setDate(d.getDate() + 1)\n        ) {\n          console.log(d);\n          dates.push(d);\n        }\n        this.setState({ availables: dates });\n      }\n    }\n  }\n\n  render() {\n    const rows = this.state.availables?.map((available, index) => {\n      const date = moment(available).format(\"YYYYMMDD\");\n      return (\n        <Row key={index}>\n          <Link to={date}>{date}</Link>\n        </Row>\n      );\n    });\n\n    return <Container>{rows}</Container>;\n  }\n}\n","import { Component } from \"react\";\n\nimport { Container, Row } from \"react-bootstrap\";\nimport { RouteComponentProps } from \"react-router\";\n\nimport moment from \"moment\";\n\nimport \"./Archives.css\";\n\ninterface User {\n  id: string;\n  name: string;\n}\n\ninterface ChatEntry {\n  user: User;\n  date: string;\n  stamp: string | undefined;\n  img: string | undefined;\n  content: string | undefined;\n}\n\ntype ChatData = Array<ChatEntry>;\n\ntype ChatDisplayParams = {\n  ref: string;\n};\n\ntype ChatDisplayState = {\n  data: ChatData | null;\n};\n\nexport class ChatDisplay extends Component<\n  RouteComponentProps<ChatDisplayParams>,\n  ChatDisplayState\n> {\n  constructor(props: RouteComponentProps<ChatDisplayParams>) {\n    super(props);\n\n    this.state = { data: null };\n  }\n\n  async componentDidMount() {\n    const resp = await fetch(\n      \"https://hololive-spammers.github.io/FubukiHunter-Chat/data.json\",\n      {\n        headers: {\n          \"Cache-Control\": \"no-cache\",\n        },\n      }\n    );\n    if (resp.ok) {\n      const json = await resp.json();\n      this.setState({ data: json });\n    }\n  }\n\n  render() {\n    const {\n      match: {\n        params: { ref },\n      },\n    } = this.props;\n\n    const rangeDate = moment(ref, \"YYYYMMDD\").toDate();\n    let maxRangeDate = new Date(rangeDate.valueOf());\n    maxRangeDate.setDate(rangeDate.getDate() + 1);\n\n    const rows = this.state.data\n      ?.filter((entry) => {\n        const date = new Date(entry.date);\n        if (date > maxRangeDate || date < rangeDate) {\n          return false;\n        }\n        return true;\n      })\n      .map((entry) => {\n        let content = null;\n        if (entry.img) {\n          content = <img src={entry.img} alt=\"\" />;\n        } else if (entry.stamp) {\n          content = `stamp: ${entry.stamp}`;\n        } else if (entry.content) {\n          content = entry.content;\n        }\n\n        const date = new Date(entry.date);\n\n        return (\n          <Row>\n            {date.toString()} - {entry.user.name} - {content}\n          </Row>\n        );\n      });\n\n    return <Container>{rows}</Container>;\n  }\n}\n","import { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport { Archives } from \"./Archives\";\nimport { ChatDisplay } from \"./ChatDisplay\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Archives />\n        </Route>\n        <Route path=\"/:ref\" component={ChatDisplay} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}